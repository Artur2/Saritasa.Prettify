<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StyleCop.Analyzers.CodeFixes</name>
    </assembly>
    <members>
        <member name="T:StyleCop.Analyzers.DocumentationRules.FileHeaderCodeFixProvider">
            <summary>
            Implements a code fix for file header diagnostics.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, add a standard file header at the top of the file.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.DocumentationRules.FileHeaderCodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.FileHeaderCodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.FileHeaderCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.DocumentationRules.InheritdocCodeFixProvider">
            <summary>
            Implements a code fix that will generate a documentation comment comprised of an empty
            <c>&lt;inheritdoc/&gt;</c> element.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.DocumentationRules.InheritdocCodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.InheritdocCodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.InheritdocCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.DocumentationRules.PropertySummaryDocumentationCodeFixProvider">
            <summary>
            Implements the code fix for property summary documentation.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.DocumentationRules.PropertySummaryDocumentationCodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.PropertySummaryDocumentationCodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.PropertySummaryDocumentationCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.DocumentationRules.SA1609SA1610CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.DocumentationRules.SA1609PropertyDocumentationMustHaveValue"/> and
            <see cref="T:StyleCop.Analyzers.DocumentationRules.SA1610PropertyDocumentationMustHaveValueText"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, fill-in a description of the value held by the property within the
            &lt;value&gt; tag.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.DocumentationRules.SA1609SA1610CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1609SA1610CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1609SA1610CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.DocumentationRules.SA1615SA1616CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.DocumentationRules.SA1615ElementReturnValueMustBeDocumented"/> and
            <see cref="T:StyleCop.Analyzers.DocumentationRules.SA1616ElementReturnValueDocumentationMustHaveText"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, add and fill-in documentation text within a &lt;returns&gt; tag
            describing the value returned from the element.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.DocumentationRules.SA1615SA1616CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1615SA1616CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1615SA1616CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.DocumentationRules.SA1617CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.DocumentationRules.SA1617VoidReturnValueMustNotBeDocumented"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, remove the <c>&lt;returns&gt;</c> tag from the element.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.DocumentationRules.SA1617CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1617CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1617CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.DocumentationRules.SA1626CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.DocumentationRules.SA1626CodeFixProvider"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, remove a slash from the beginning of the comment so that it begins with
            only two slashes.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.DocumentationRules.SA1626CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1626CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1626CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.DocumentationRules.SA1642SA1643CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.DocumentationRules.SA1642ConstructorSummaryDocumentationMustBeginWithStandardText"/>
            and <see cref="T:StyleCop.Analyzers.DocumentationRules.SA1643DestructorSummaryDocumentationMustBeginWithStandardText"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, add the standard documentation text.
            above.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.DocumentationRules.SA1642SA1643CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1642SA1643CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1642SA1643CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.DocumentationRules.SA1649CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.DocumentationRules.SA1649FileNameMustMatchTypeName"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.DocumentationRules.SA1649CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1649CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1649CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.DocumentationRules.SA1651CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.DocumentationRules.SA1651DoNotUsePlaceholderElements"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, review the placeholder documentation for accuracy and remove the
            &lt;placeholder&gt; tags.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.DocumentationRules.SA1651CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1651CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.DocumentationRules.SA1651CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.Helpers.CustomBatchFixAllProvider">
            <summary>
            Helper class for "Fix all occurrences" code fix providers.
            </summary>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.CustomBatchFixAllProvider.TryAddDocumentMergeChangesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Document,System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextChange},System.Threading.CancellationToken)">
            <summary>
            Try to merge the changes between <paramref name="newDocument"/> and <paramref name="oldDocument"/> into <paramref name="cumulativeChanges"/>.
            If there is any conflicting change in <paramref name="newDocument"/> with existing <paramref name="cumulativeChanges"/>, then the original <paramref name="cumulativeChanges"/> are returned.
            Otherwise, the newly merged changes are returned.
            </summary>
            <param name="oldDocument">Base document on which FixAll was invoked.</param>
            <param name="newDocument">New document with a code fix that is being merged.</param>
            <param name="cumulativeChanges">Existing merged changes from other batch fixes into which newDocument changes are being merged.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:StyleCop.Analyzers.Helpers.CustomFixAllProviders">
            <summary>
            Contains custom implementations of <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.Helpers.CustomFixAllProviders.BatchFixer">
            <summary>
            Gets the default batch fix all provider.
            This provider batches all the individual diagnostic fixes across the scope of fix all action,
            computes fixes in parallel and then merges all the non-conflicting fixes into a single fix all code action.
            This fixer supports fixes for the following fix all scopes:
            <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Document"/>, <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Project"/> and <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllScope.Solution"/>.
            </summary>
            <remarks>
            The batch fix all provider only batches operations (i.e. <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeActionOperation"/>) of type
            <see cref="T:Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation"/> present within the individual diagnostic fixes. Other types of
            operations present within these fixes are ignored.
            </remarks>
            <value>
            The default batch fix all provider.
            </value>
        </member>
        <member name="T:StyleCop.Analyzers.Helpers.DocumentBasedFixAllProvider">
            <summary>
            Provides a base class to write a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/> that fixes documents independently.
            </summary>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.DocumentBasedFixAllProvider.FixAllInDocumentAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Fixes all occurrences of a diagnostic in a specific document.
            </summary>
            <param name="fixAllContext">The context for the Fix All operation.</param>
            <param name="document">The document to fix.</param>
            <param name="diagnostics">The diagnostics to fix in the document.</param>
            <returns>
            <para>The new <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> representing the root of the fixed document.</para>
            <para>-or-</para>
            <para><see langword="null"/>, if no changes were made to the document.</para>
            </returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.FixAllContextHelper.GetAllDiagnosticsAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,Microsoft.CodeAnalysis.Project)">
            <summary>
            Gets all <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> instances within a specific <see cref="T:Microsoft.CodeAnalysis.Project"/> which are relevant to a
            <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/>.
            </summary>
            <param name="fixAllContext">The context for the Fix All operation.</param>
            <param name="project">The project.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation. When the task completes
            successfully, the <see cref="P:System.Threading.Tasks.Task`1.Result"/> will contain the requested diagnostics.</returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.FormattingHelper.WithoutFormatting``1(``0)">
            <summary>
            Transforms a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> to ensure no formatting operations will be applied to the node or any
            of its descendants when a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> is applied.
            </summary>
            <typeparam name="TNode">The specific type of syntax node.</typeparam>
            <param name="node">The syntax node.</param>
            <returns>
            A syntax node which is equivalent to the input <paramref name="node"/>, but which will not be subject to
            automatic code formatting operations when applied as part of a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.
            </returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.FormattingHelper.WithoutFormatting(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Transforms a <see cref="T:Microsoft.CodeAnalysis.SyntaxToken"/> to ensure no formatting operations will be applied to the token or
            any of its descendants when a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> is applied.
            </summary>
            <param name="token">The syntax token.</param>
            <returns>
            A syntax token which is equivalent to the input <paramref name="token"/>, but which will not be subject to
            automatic code formatting operations when applied as part of a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.
            </returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.FormattingHelper.WithoutFormatting(Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Transforms a <see cref="T:Microsoft.CodeAnalysis.SyntaxTrivia"/> to ensure no formatting operations will be applied to the trivia or
            any of its descendants when a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/> is applied.
            </summary>
            <param name="trivia">The syntax trivia.</param>
            <returns>
            A syntax trivia which is equivalent to the input <paramref name="trivia"/>, but which will not be subject to
            automatic code formatting operations when applied as part of a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.
            </returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.FormattingHelper.WithoutFormattingImpl``1(``0)">
            <summary>
            Remove formatting from a single <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>. The descendants of the node, including its leading
            and trailing trivia, are not altered by this method.
            </summary>
            <remarks>
            <para>This method is responsible for the single-node transformation as part of
            <see cref="O:StyleCop.Analyzers.SpacingRules.SpacingExtensions.WithoutFormatting"/>.</para>
            </remarks>
            <typeparam name="TNode">The specific type of syntax node.</typeparam>
            <param name="node">The syntax node.</param>
            <returns>
            A syntax node which is equivalent to the input <paramref name="node"/>, but which will not be subject to
            automatic code formatting operations when applied as part of a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.
            </returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.FormattingHelper.WithoutFormattingImpl(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Remove formatting from a single <see cref="T:Microsoft.CodeAnalysis.SyntaxToken"/>. The descendants of the token, including its
            leading and trailing trivia, are not altered by this method.
            </summary>
            <remarks>
            <para>This method is responsible for the single-token transformation as part of
            <see cref="O:StyleCop.Analyzers.SpacingRules.SpacingExtensions.WithoutFormatting"/>.</para>
            </remarks>
            <param name="token">The syntax token.</param>
            <returns>
            A syntax token which is equivalent to the input <paramref name="token"/>, but which will not be subject to
            automatic code formatting operations when applied as part of a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.
            </returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.FormattingHelper.WithoutFormattingImpl(Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Remove formatting from a single <see cref="T:Microsoft.CodeAnalysis.SyntaxTrivia"/>. The descendants of the trivia, including any
            structure it contains, are not altered by this method.
            </summary>
            <remarks>
            <para>This method is responsible for the single-trivia transformation as part of
            <see cref="O:StyleCop.Analyzers.SpacingRules.SpacingExtensions.WithoutFormatting"/>.</para>
            </remarks>
            <param name="trivia">The syntax trivia.</param>
            <returns>
            A syntax trivia which is equivalent to the input <paramref name="trivia"/>, but which will not be subject to
            automatic code formatting operations when applied as part of a <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>.
            </returns>
        </member>
        <member name="T:StyleCop.Analyzers.Helpers.IndentationHelper">
            <summary>
            Provides helper methods to work with indentation.
            </summary>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.IndentationHelper.GetFirstTokenOnTextLine(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Gets the first token on the textline that the given token is on.
            </summary>
            <param name="token">The token used to determine the textline.</param>
            <returns>The first token on the textline of the given token.</returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.IndentationHelper.GetIndentationSteps(StyleCop.Analyzers.Settings.ObjectModel.IndentationSettings,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the number of steps that the given node is indented.
            </summary>
            <param name="indentationSettings">The indentation settings to use.</param>
            <param name="node">The node to inspect.</param>
            <returns>The number of steps that the node is indented.</returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.IndentationHelper.GetIndentationSteps(StyleCop.Analyzers.Settings.ObjectModel.IndentationSettings,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Gets the number of steps that the given token is indented.
            </summary>
            <param name="indentationSettings">The indentation settings to use.</param>
            <param name="token">The token to inspect.</param>
            <returns>The number of steps that the token is indented.</returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.IndentationHelper.GenerateIndentationString(StyleCop.Analyzers.Settings.ObjectModel.IndentationSettings,System.Int32)">
            <summary>
            Generate a new indentation string.
            </summary>
            <param name="indentationSettings">The indentation settings to use.</param>
            <param name="indentationSteps">The number of indentation steps.</param>
            <returns>A string containing the amount of whitespace needed for the given indentation steps.</returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.IndentationHelper.GenerateWhitespaceTrivia(StyleCop.Analyzers.Settings.ObjectModel.IndentationSettings,System.Int32)">
            <summary>
            Generates a whitespace trivia with the requested indentation.
            </summary>
            <param name="indentationSettings">The indentation settings to use.</param>
            <param name="indentationSteps">The amount of indentation steps.</param>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.SyntaxTrivia"/> containing the indentation whitespace.</returns>
        </member>
        <member name="T:StyleCop.Analyzers.Helpers.QueryIndentationHelpers">
            <summary>
            Helper class containing methods for determining query indentation.
            </summary>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.QueryIndentationHelpers.GetQueryIndentationTrivia(StyleCop.Analyzers.Settings.ObjectModel.IndentationSettings,Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax)">
            <summary>
            Gets a whitespace trivia containing the proper amount of indentation for new lines in the given query.
            </summary>
            <param name="indentationSettings">The indentation settings to use.</param>
            <param name="queryExpression">The query expression to determine indentation from.</param>
            <returns>A whitespace trivia containing the proper amount of indentation.</returns>
        </member>
        <member name="M:StyleCop.Analyzers.Helpers.QueryIndentationHelpers.GetQueryIndentationTrivia(StyleCop.Analyzers.Settings.ObjectModel.IndentationSettings,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Gets a whitespace trivia containing the proper amount of indentation for new lines in the query of which the given token is a part.
            </summary>
            <param name="indentationSettings">The indentation settings to use.</param>
            <param name="token">A token within a query expression.</param>
            <returns>A whitespace trivia containing the proper amount of indentation.</returns>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1500CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1500BracesForMultiLineStatementsMustNotShareLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1500CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1500CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1500CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1501CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1501StatementMustNotBeOnASingleLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1501CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1501CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1501CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1502CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1502ElementMustNotBeOnASingleLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1502CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1502CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1502CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1503CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1503BracesMustNotBeOmitted"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, the violating statement will be converted to a block statement.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1503CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1503CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1503CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1504CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1504AllAccessorsMustBeSingleLineOrMultiLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1504CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1504CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1504CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1505CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1505OpeningBracesMustNotBeFollowedByBlankLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1505CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1505CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1505CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1506CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1506ElementDocumentationHeadersMustNotBeFollowedByBlankLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1506CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1506CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1506CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1507CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1507CodeMustNotContainMultipleBlankLinesInARow"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1507CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1507CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1507CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1508CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1508ClosingBracesMustNotBePrecededByBlankLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1508CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1508CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1508CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1509CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1509OpeningBracesMustNotBePrecededByBlankLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1509CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1509CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1509CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1510CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1510ChainedStatementBlocksMustNotBePrecededByBlankLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1510CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1510CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1510CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1511CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1511WhileDoFooterMustNotBePrecededByBlankLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1511CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1511CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1511CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1512CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1512SingleLineCommentsMustNotBeFollowedByBlankLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1512CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1512CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1512CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1513CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1513ClosingBraceMustBeFollowedByBlankLine"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, ensure a blank line follows closing braces.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1513CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1513CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1513CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1514CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1514ElementDocumentationHeaderMustBePrecededByBlankLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1514CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1514CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1514CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1515CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1515SingleLineCommentMustBePrecededByBlankLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1515CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1515CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1515CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1516CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1516ElementsMustBeSeparatedByBlankLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1516CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1516CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1516CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1517CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1517CodeMustNotContainBlankLinesAtStartOfFile"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1517CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1517CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1517CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.LayoutRules.SA1518CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.LayoutRules.SA1518UseLineEndingsCorrectlyAtEndOfFile"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.LayoutRules.SA1518CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1518CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1518CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.LayoutRules.SA1518CodeFixProvider.FixEndOfFileAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Diagnostic,StyleCop.Analyzers.Settings.ObjectModel.EndOfFileHandling,System.Threading.CancellationToken)">
            <summary>
            Fixes the whitespace at the end of a document.
            </summary>
            <param name="document">The document to be changed.</param>
            <param name="diagnostic">The diagnostic to fix.</param>
            <param name="newlineAtEndOfFile">A <see cref="T:StyleCop.Analyzers.Settings.ObjectModel.EndOfFileHandling"/> value indicating the desired behavior.</param>
            <param name="cancellationToken">The cancellation token associated with the fix action.</param>
            <returns>The transformed document.</returns>
        </member>
        <member name="T:StyleCop.Analyzers.MaintainabilityRules.SA1119CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.MaintainabilityRules.SA1119StatementMustNotUseUnnecessaryParenthesis"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, insert parenthesis within the arithmetic expression to declare the precedence of the operations.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.MaintainabilityRules.SA1119CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1119CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1119CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.MaintainabilityRules.SA1400CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.MaintainabilityRules.SA1400AccessModifierMustBeDeclared"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, add an access modifier to the declaration of the element.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.MaintainabilityRules.SA1400CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1400CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1400CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.MaintainabilityRules.SA1402CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.MaintainabilityRules.SA1402FileMayOnlyContainASingleClass"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, move each class into its own file.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.MaintainabilityRules.SA1402CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1402CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1402CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.MaintainabilityRules.SA1404CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.MaintainabilityRules.SA1404CodeAnalysisSuppressionMustHaveJustification"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, add a justification to your suppression.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.MaintainabilityRules.SA1404CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1404CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1404CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.MaintainabilityRules.SA1407SA1408CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.MaintainabilityRules.SA1407ArithmeticExpressionsMustDeclarePrecedence"/> and  <see cref="T:StyleCop.Analyzers.MaintainabilityRules.SA1408ConditionalExpressionsMustDeclarePrecedence"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, insert parenthesis within the arithmetic expression to declare the precedence of the operations.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.MaintainabilityRules.SA1407SA1408CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1407SA1408CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1407SA1408CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.MaintainabilityRules.SA1410SA1411CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.MaintainabilityRules.SA1410RemoveDelegateParenthesisWhenPossible"/> and <see cref="T:StyleCop.Analyzers.MaintainabilityRules.SA1411AttributeConstructorMustNotUseUnnecessaryParenthesis"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, insert parenthesis within the arithmetic expression to declare the precedence of the operations.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.MaintainabilityRules.SA1410SA1411CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1410SA1411CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1410SA1411CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.MaintainabilityRules.SA1412CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.MaintainabilityRules.SA1412StoreFilesAsUtf8"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, change the encoding to UTF-8 with preamble.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.MaintainabilityRules.SA1412CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1412CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1412CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.MaintainabilityRules.SA1413CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.MaintainabilityRules.SA1413UseTrailingCommasInMultiLineInitializers"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.MaintainabilityRules.SA1413CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1413CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.MaintainabilityRules.SA1413CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.NamingRules.RenameToLowerCaseCodeFixProvider">
            <summary>
            Implements a code fix for diagnostics which are fixed by renaming a symbol to start with a lower case letter.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, change the name of the field or variable so that it begins with a
            lower-case letter, or place the item within a <c>NativeMethods</c> class if appropriate.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.NamingRules.RenameToLowerCaseCodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.RenameToLowerCaseCodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.RenameToLowerCaseCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.NamingRules.RenameToUpperCaseCodeFixProvider">
            <summary>
            Implements a code fix for all analyzers that require a symbol to be upper case.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, change the name of the symbol so that it begins with an upper-case letter,
            or place the item within a <c>NativeMethods</c> class if appropriate.</para>
            </remarks>
        </member>
        <member name="F:StyleCop.Analyzers.NamingRules.RenameToUpperCaseCodeFixProvider.Suffix">
            <summary>
            During conflict resolution for fields, this suffix is tried before falling back to 1, 2, 3, etc...
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.NamingRules.RenameToUpperCaseCodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.RenameToUpperCaseCodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.RenameToUpperCaseCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.NamingRules.SA1302CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.NamingRules.SA1302InterfaceNamesMustBeginWithI"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, add the capital letter I to the front of the interface name, or place the
            item within a <c>NativeMethods</c> class if appropriate.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.NamingRules.SA1302CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.SA1302CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.NamingRules.SA1308CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.NamingRules.SA1308VariableNamesMustNotBePrefixed"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, remove the prefix from the beginning of the field name, or place the
            item within a <c>NativeMethods</c> class if appropriate.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.NamingRules.SA1308CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.SA1308CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.SA1308CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.NamingRules.SA1309CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.NamingRules.SA1309FieldNamesMustNotBeginWithUnderscore"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, remove the underscore from the beginning of the field name, or place the
            item within a <c>NativeMethods</c> class if appropriate.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.NamingRules.SA1309CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.SA1309CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.SA1309CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.NamingRules.SA1310CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.NamingRules.SA1310FieldNamesMustNotContainUnderscore"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, remove the underscore from the name of the field, or place the item
            within a <c>NativeMethods</c> class if appropriate.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.NamingRules.SA1310CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.SA1310CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.SA1310CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.NamingRules.SX1309CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.NamingRules.SX1309FieldNamesMustBeginWithUnderscore"/> and
            <see cref="T:StyleCop.Analyzers.NamingRules.SX1309SStaticFieldNamesMustBeginWithUnderscore"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, add an underscore to the beginning of the field name, or place the
            item within a <c>NativeMethods</c> class if appropriate.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.NamingRules.SX1309CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.SX1309CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.NamingRules.SX1309CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.OrderingRules.ElementOrderCodeFixProvider">
            <summary>
            Implements code fixes for element ordering rules.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.OrderingRules.ElementOrderCodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.ElementOrderCodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.ElementOrderCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.OrderingRules.SA1205CodeFixProvider">
            <summary>
            Implements code fixes for <see cref="T:StyleCop.Analyzers.OrderingRules.SA1205PartialElementsMustDeclareAccess"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.OrderingRules.SA1205CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1205CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1205CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.OrderingRules.SA1206CodeFixProvider">
            <summary>
            Implements code fixes for element ordering rules.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.OrderingRules.SA1206CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1206CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1206CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1206CodeFixProvider.FullySortModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)">
            <summary>
            Sorts the complete modifier list to fix all issues.
            The trivia will be maintained positionally.
            The relative order within the different kinds <seealso cref="T:StyleCop.Analyzers.OrderingRules.ModifierOrderHelper.ModifierType"/> will not be
            changed.
            </summary>
            <param name="modifiers">All modifiers from the declaration.</param>
            <returns>A fully sorted modifier list.</returns>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1206CodeFixProvider.PartiallySortModifiers(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Sorts the modifier list to fix all issues before <paramref name="modifierToFix"/>
            and keep the remaining modifiers untouched.
            The trivia will be maintained positionally.
            The relative order within the different kinds <seealso cref="T:StyleCop.Analyzers.OrderingRules.ModifierOrderHelper.ModifierType"/> will not be
            changed.
            </summary>
            <param name="modifiers">All modifiers from the declaration.</param>
            <param name="modifierToFix">The modifier with diagnostics.</param>
            <returns>A partially sorted modifier list (sorted up to <paramref name="modifierToFix"/>)</returns>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1206CodeFixProvider.AdjustTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},Microsoft.CodeAnalysis.SyntaxTokenList)">
            <summary>
            Positionally apply the trivia from the old modifier list to the new one.
            </summary>
            <param name="newModifiers">The new modifiers.</param>
            <param name="oldModifiers">The old modifiers.</param>
            <returns>New modifier list with trivia from the old one.</returns>
        </member>
        <member name="T:StyleCop.Analyzers.OrderingRules.SA1207CodeFixProvider">
            <summary>
            Implements code fixes for <see cref="T:StyleCop.Analyzers.OrderingRules.SA1207ProtectedMustComeBeforeInternal"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.OrderingRules.SA1207CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1207CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1207CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.OrderingRules.SA1212SA1213CodeFixProvider">
            <summary>
            Implements code fixes for <see cref="T:StyleCop.Analyzers.OrderingRules.SA1212PropertyAccessorsMustFollowOrder"/> and <see cref="T:StyleCop.Analyzers.OrderingRules.SA1213EventAccessorsMustFollowOrder"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.OrderingRules.SA1212SA1213CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1212SA1213CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.SA1212SA1213CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.OrderingRules.UsingCodeFixProvider">
            <summary>
            Implements a code fix for all misaligned using statements.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.OrderingRules.UsingCodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.UsingCodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.UsingCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:StyleCop.Analyzers.OrderingRules.UsingCodeFixProvider.FixAll.CodeActionTitle">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.OrderingRules.UsingCodeFixProvider.FixAll.FixAllInDocumentAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext,Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic})">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.RemoveRegionCodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1123DoNotPlaceRegionsWithinElements"/> and <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1124DoNotUseRegions"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, remove the region.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.RemoveRegionCodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.RemoveRegionCodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.RemoveRegionCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1100CodeFixProvider">
            <summary>
            This class provides a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1100DoNotPrefixCallsWithBaseUnlessLocalImplementationExists"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, change the <c>base.</c> prefix to <c>this.</c>.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1100CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1100CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1100CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1101CodeFixProvider">
            <summary>
            This class provides a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1101PrefixLocalCallsWithThis"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, insert the <c>this.</c> prefix before the call to the class
            member.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1101CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1101CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1101CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1102CodeFixProvider">
            <summary>
            This class provides a code fix for the SA1102 diagnostic.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1102CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1102CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1102CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1103CodeFixProvider">
            <summary>
            This class provides a code fix for the SA1103 diagnostic.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1103CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1103CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1103CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1104SA1105CodeFixProvider">
            <summary>
            This class provides a code fix for the SA1104 diagnostic.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1104SA1105CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1104SA1105CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1104SA1105CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1106CodeFixProvider">
            <summary>
            This class provides a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1106CodeMustNotContainEmptyStatements"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1106CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1106CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1106CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1107CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1107CodeMustNotContainMultipleStatementsOnOneLine"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, add or remove a space after the keyword, according to the description
            above.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1107CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1107CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1107CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1116CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1116SplitParametersMustStartOnLineAfterDeclaration"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, ensure that the first parameter starts on the line after the opening
            bracket, or place all parameters on the same line if the parameters are not too long.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1116CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1116CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1116CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1120CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1120CommentsMustContainText"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1120CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1120CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1120CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1121CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1121UseBuiltInTypeAlias"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, ensure that the comma is followed by a single space, and is not preceded
            by any space.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1121CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1121CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1121CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1122CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1122UseStringEmptyForEmptyStrings"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, add or remove a space after the keyword, according to the description
            above.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1122CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1122CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1122CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1127CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1127GenericTypeConstraintsMustBeOnOwnLine"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, ensure that each type constraint is placed on its own line.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1127CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1127CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1127CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1127CodeFixProvider.RemoveUnnecessaryWhitespaceTrivia(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Removes any unnecessary whitespace and end-of-line trivia from a token, but leaves comments.
            If a comment is encountered, whitespace trivia before the comment is preserved.
            </summary>
            <param name="token">Token to remove trivia from.</param>
            <returns>Token with whitespace and end-of-line trivia removed.</returns>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1128CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1128ConstructorInitializerMustBeOnOwnLine"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, place the constructor initializer on its own line.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1128CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1128CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1128CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1129CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1129DoNotUseDefaultValueTypeConstructor"/>.
            </summary>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1129CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1129CodeFixProvider.IsType``1(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Determines whether a symbol is an instance of a given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type to match.</typeparam>
            <param name="namedTypeSymbol">The symbol.</param>
            <returns><see langword="true"/> if the syntax matches the type; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1129CodeFixProvider.IsEnumWithDefaultMember(Microsoft.CodeAnalysis.INamedTypeSymbol,System.String@)">
            <summary>
            Determines whether a given enumeration symbol contains a member with value <c>0</c>.
            </summary>
            <param name="namedTypeSymbol">The symbol.</param>
            <param name="foundMemberName">Will be set to the string name of the member, if one is found.</param>
            <returns><see langword="true"/> if the syntax is an enumeration with a value of <c>0</c>; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1129CodeFixProvider.ConstructMemberAccessSyntax(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)">
            <summary>
            Gets a qualified member access expression for the given <paramref name="typeSyntax"/>.
            </summary>
            <param name="typeSyntax">The type syntax from the original constructor.</param>
            <param name="memberName">The member name.</param>
            <returns>A new member access expression.</returns>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1130CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1130UseLambdaSyntax"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1130CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1130CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1130CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1131CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1131UseReadableConditions"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, switch the arguments of the comparison.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1131CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1131CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1131CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1132CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1132DoNotCombineFields"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, declare each field as part of its own field definition.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1132CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1132CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1132CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1133CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1133DoNotCombineAttributes"/>.
            </summary>
            <remarks>
            The SA1133 code fix adds the new lines to make sure that it doesn't immediately introduces a SA1134 after code fixing,
            but it will not / should not attempt to fix any preexisting SA1134 cases.
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1133CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1133CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1133CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1134CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1134AttributesMustNotShareLine"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1134CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1134CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1134CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.ReadabilityRules.SA1136CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.ReadabilityRules.SA1136EnumValuesShouldBeOnSeparateLines"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SA1136CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1136CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SA1136CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="P:StyleCop.Analyzers.ReadabilityRules.SX1101CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SX1101CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.ReadabilityRules.SX1101CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.Settings.SettingsFileCodeFixProvider">
            <summary>
            Implements a code fix that will generate a StyleCop settings file if it does not exist yet.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.Settings.SettingsFileCodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.Settings.SettingsFileCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.Settings.SettingsFileCodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.SpacingRules.SA1003CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.SpacingRules.SA1003SymbolsMustBeSpacedCorrectly"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, ensure that the spacing around the symbol follows the rule described in
            <see cref="T:StyleCop.Analyzers.SpacingRules.SA1003SymbolsMustBeSpacedCorrectly"/>.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.SpacingRules.SA1003CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1003CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1003CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.SpacingRules.SA1004CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.SpacingRules.SA1004DocumentationLinesMustBeginWithSingleSpace"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, ensure that the header line begins with a single space.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.SpacingRules.SA1004CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1004CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1004CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.SpacingRules.SA1005CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.SpacingRules.SA1005SingleLineCommentsMustBeginWithSingleSpace"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, ensure that the comment begins with a single space. If the comment is
            being used to comment out a line of code, ensure that the comment begins with four forward slashes, in which
            case the leading space can be omitted.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.SpacingRules.SA1005CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1005CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1005CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.SpacingRules.SA1018CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.SpacingRules.SA1018NullableTypeSymbolsMustNotBePrecededBySpace"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, ensure that there is no whitespace before the nullable type
            symbol.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.SpacingRules.SA1018CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1018CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1018CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.SpacingRules.SA1025CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.SpacingRules.SA1025CodeMustNotContainMultipleWhitespaceInARow"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, remove the extra whitespace characters and leave only a single space.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.SpacingRules.SA1025CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1025CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1025CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.SpacingRules.SA1027CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.SpacingRules.SA1027UseTabsCorrectly"/>.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.SpacingRules.SA1027CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1027CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1027CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="T:StyleCop.Analyzers.SpacingRules.SA1028CodeFixProvider">
            <summary>
            Implements a code fix for <see cref="T:StyleCop.Analyzers.SpacingRules.SA1028CodeMustNotContainTrailingWhitespace"/>.
            </summary>
            <remarks>
            <para>To fix a violation of this rule, remove any whitespace at the end of a line of code.</para>
            </remarks>
        </member>
        <member name="P:StyleCop.Analyzers.SpacingRules.SA1028CodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1028CodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1028CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.SA1028CodeFixProvider.RemoveWhitespaceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Diagnostic,System.Threading.CancellationToken)">
            <summary>
            Removes trailing whitespace.
            </summary>
            <param name="document">The document to be changed.</param>
            <param name="diagnostic">The diagnostic to fix.</param>
            <param name="cancellationToken">The cancellation token associated with the fix action.</param>
            <returns>The transformed document.</returns>
        </member>
        <member name="T:StyleCop.Analyzers.SpacingRules.TokenSpacingCodeFixProvider">
            <summary>
            Implements a code fix for the opening and closing spacing diagnostics.
            </summary>
        </member>
        <member name="P:StyleCop.Analyzers.SpacingRules.TokenSpacingCodeFixProvider.FixableDiagnosticIds">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.TokenSpacingCodeFixProvider.GetFixAllProvider">
            <inheritdoc/>
        </member>
        <member name="M:StyleCop.Analyzers.SpacingRules.TokenSpacingCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <inheritdoc/>
        </member>
    </members>
</doc>
